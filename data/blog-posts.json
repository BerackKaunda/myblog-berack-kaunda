{
  "blogs": [
    {
      "category": "marketing",
      "title": "Let's go! The 12 Startups in 12 Months Challenge Starts Now",
      "body": "What would you do if I gave you $1 million today on the condition that you invest it entirely in the stock market?\n\nFirst off, you’d probably find someone who knows way more about investing and get some professional advice.\n\nBut in lieu of that, you’d divide your money among a variety of bets:\n\nStable companies with a history of profitability, growth-stage companies with a high tolerance for risk, and maybe a few companies you just personally believe have potential.\n\nIn short, you’d diversify.\n\nThe thought of putting all $1 million into a single company probably wouldn’t cross your mind.\n\nSomeday soon, I’d like to think a year of my time will be “worth” more than $1 million. So I won’t be putting it all into a single company either.\n\nInstead I’ll build a startup a month for the next year.\n\nPrior Art\nThe first person to popularize building 12 startups in 12 months is Pieter Levels, who launched products like NomadList and RemoteOK in 2014.\n\nSince he operates both as open startups we know they make a combined $600,000 per year.\n\nNot bad for a solo founder with a part-time sys admin.\n\nIn the 5 years since, several others have taken the same challenge.\n\nJon Yongfook started at the end of 2018, and eventually founded BannerBear. In the year he’s been working on it, it’s grown to $5.1K MRR (monthly recurring revenue).\n\nWhen I was chatting with Dominic Monn about the idea, he told me he’s had success with this approach too:\n\nI did something along the same lines where I launched 6 things in about 6 months in 2018 and two things grew out of it that make around $3.5k MRR together today, and some of the others I sold for a cumulative 5 figures as well.\n\nThe common thread is that no one doing the challenge completes it.\n\nBuilding 12 startups isn’t actually the goal.\n\nThe goal is to eliminate the most common blockers from shipping a product: failure to stick to an MVP and finish something, fear of shipping, launching, charging money, and so forth.\n\nNow, each of these things has to happen inside a month.\n\nThe idea is that a fixed timespan helps you quickly find a few ideas worthy of your undivided focus.\n\nInstead of spending years working on an idea that won’t pan out.\n\nI’m under no illusion that since Pieter’s very public success, a ton of people have undergone the same challenge.\n\nFew, if any, have seen the same financial outcomes thus far. The majority still work their day jobs. And a quick search on Google reveals that most people don’t make it past the first 2-3 startups.\n\nThat’s why I’ve adapted the challenge to tip the odds in my favor.\n\nIt’s dangerous to go alone\nIn Lost and Founder, Rand Fishkin, former CEO of Moz, writes:\n\nThat’s one of the biggest things I’ve learned about startups: it’s dangerous to go alone. You want people around you who’ve been through this before and are willing to openly share their experiences.\n\nThis is the main difference in our approach to building 12 startups in 12 months: We’re not going alone.\n\nWe’ve created 12x Startup: A cohort of 4 motivated makers, each building their own “one startup per month”.\n\nEach day, we post our current task on our public status page. We correspond regularly in Slack, challenge each other’s ideas, and plan to livestream our monthly demo sessions for you to tune into.\n\n",
      "imageLink": "https://monicalent.com/images/blog/banff-canada.jpg",
      "author": "Kaunda Berack",
      "readTime": "3 min read",
      "currentTime": "17 May 2021",
      "id": 1
    },
    {
      "category": "career",
      "title": "7 Absolute Truths I Unlearned as Junior Developer",
      "body": "Next year, I’ll be entering my 10th year of being formally employed to write code. Ten years! And besides actual employment, for nearly 2/3 of my life, I’ve been building things on the web. I can barely remember a time in my life where I didn’t know HTML, which is kind of weird when you think about it. Some kids learn to play an instrument or dance ballet, but instead I was creating magical worlds with code in my childhood bedroom.\n\nIn reflecting on this first decade of getting regularly paid money to type weird symbols into my Terminal, I wanted to take some time to share some of the ways my thinking shifted over the years as a developer.\n\nFor today’s junior developers: Maybe you’ll find something here you currently believe, and get inspired to learn more about it and why the topic is so multi-faceted. Or maybe you’ll find this post encouraging because you’re already so far ahead of where I was at your stage.\n\nFor today’s senior developers: Maybe you can relate, and also have some funny (and humbling) stories to share about your own life lessons when you were a junior dev.\n\nTo be clear, I think junior developers are awesome and just showing up to learn already takes a ton of courage. This post is about my own journey and learnings, and isn’t meant to be a generalization about how all junior devs think or behave.\n\nI hope you enjoy the post and can relate a little bit 😄\n\nThanks to Artem and Sara for your feedback on this post!\n\nAbsolute truths I unlearned as a junior developer\n1. I’m a senior developer\nI was 19 years old when I applied for my first technical job. The position I was applying for was called “Student Webmaster”. Which is a pretty awesome job title, because you could be considered both a “student” and a “master” at the same time. Nowadays everyone wants to be an “engineer” because it sounds fancier, but if you ask me, “master” is where it’s at. Anyways, my job was to write PHP and MySQL, and maintain our Drupal website as well as building some internal tools.\n\nSince I’d been coding in my bedroom for a couple of years, I was pretty sure those years counted as “years of experience”. So when I was asked about how much experience I had writing PHP, I confidently answered, “3 or 4 years!”\n\nI thought I knew a lot about SQL because I could do outer joins 😎\n\nAnd when I googled it, 3-4 years of experience meant I should be making 💰\n\nFast forward to my latest job, which I got after 5 years of “combined” student and professional experience (which I thought was the same as normal experience). Yet in that time, I basically never had my code reviewed. I deployed by ssh-ing into a server and running git pull. I’m rather sure I never had to open a Pull Request. Don’t get me wrong, I learned a ton of awesome stuff at my first two jobs, but I’d never really worked with other devs in the same codebase. And yet, I applied for a position for “Senior Frontend Engineer”, got an offer, and accepted it.\n\nThere I was, a senior developer at the ripe age of 24 years old.\n\nI mean they wouldn’t have given me this job title if I wasn’t really senior, right?! Surely, my impressive experience had brought me to this point, and people should listen to me!! Already at the pinnacle of my technical career, and the youngest developer in the office.\n\nLike a boss 💅\n\nWhat I eventually learned\nNot all experience is created equal. My experience coding in my bedroom, working as a student, working in CS research, and working at a growing startup are all valuable kinds of experience. But they aren’t all the same. Early in your career, you can learn 10x more in a supportive team in 1 year, than coding on your own (or with minimal feedback) for 5 years. If your code is never reviewed by other developers, you will not learn as fast as you can – by an enormous factor.\n\nThat’s why mentors are so important, and the team you work with is worth so much more than a couple bucks in your paycheck. Don’t accept a junior position where you’ll be working alone, if you can help it! And don’t accept your first role (or, honestly, any role) based on salary alone. The team is where the real value is.\n\nI also learned that job titles don’t “make” you anything. It’s kind of like, being a CTO with a 5-person team is different than with a 50-person team or a 500-person team. The job and skills required are totally different, even if the title is identical. So just because I had a “senior” job title did not make me a senior engineer at all. Furthermore, hierarchical titles are inherently flawed, and difficult to compare cross-company. I learned it’s important not to fixate on titles, or use them as a form of external validation.\n\n2. Everyone writes tests\nFor the first half of my career, I worked in research. Specifically, I worked on an publicly-funded project for about 3 1/2 years, and then at a university at the NLP chair for a year and a half. I can tell you one thing: programming in research is completely different than programming in the industry.\n\nFor the most part, you aren’t building applications. You’re working on algorithms or parsing data sets. Alternatively, if you are building an application, chances are your work is being publicly funded – which means it’s free for others to use and usually open-source. And when something is free, that means, for the most part, you are not really responsible to make sure it’s always perfectly available.\n\nBecause, well, it’s free.\n\nYou’re also not responsible to make any money or produce results, but that is an entirely different blog post ranting about being a developer in academia ✨\n\nLong story short, I left academia with lots of expectations.\n\nExpectations about how the industry would work. There would be automated deployment. Pull requests and code review. It was going to be glorious! Finally the code quality I had been longing for! But beyond quality code with proper standards and best practices, I strongly believed, everyone in the software industry writes tests.\n\nAhem.\n\nSo imagine my surprise when I showed up at my first day on the job at a startup and found no tests at all. No tests in the frontend. No tests in the backend. Just, no tests.\n\nNada. Zip. Null. Undefined. NaN tests.\n\nNot only were there no tests, but no one seemed to have a problem with the lack of tests! With a bit of naivety, I assumed the reason there were no tests was because people just didn’t know how to write tests for AngularJS. If I taught them how, everything would be OK and we’d start to have tests. Wrong! Long story short, years and years later, we’ve made huge progress on adding automated tests to our code, and it wasn’t as straightforward as I thought it would be.\n\nBut not because people didn’t know how to write the tests.\n\nThey’d either never felt the pain of not having tests, or they’d felt the pain of having legacy tests. Two things I’d never experienced for myself.\n\nWhat I eventually learned\nLoads of companies and startups have little or no tests. When struggling to find product market fit, or fighting for survival, a lot of companies neglect testing early on. Even companies that look fancy, sponsoring conferences or open-sourcing code – so many still have a big, gnarly monolith with minimal tests they need your help to improve. Ask devs who aren’t trying to recruit you to tell you about the state of the codebase.\n\nNo company has a perfect tech setup. Every company has problems, every company has technical debt. The question is what they’re doing about it. We should have no illusions when applying for jobs that there is work to be done – or else they wouldn’t be hiring 😉\n\nBeing overly opinionated on topics you lack real-world experience with is pretty arrogant. I came across as SUCH a know-it-all, insisting there must be tests yet having hardly any experience on what that really looked like at scale. Don’t be like me. It’s important to have principles, but also to be open and truly interested to understand other people’s experiences and perspectives.\n\n3. We’re so far behind everyone else (AKA “tech FOMO”)\nThis one is closely related to the topic of unit testing. While my company didn’t have many unit tests, surely all the other companies did, right?\n\nI read so many blog posts. I watched conference talks on YouTube. I read “that orange website” all the damn time. It seemed like everyone was writing super sophisticated and high-quality applications with great performance and fancy animations, while I was just over here patching some stuff together trying to make it work in time for my deadline.\n\nI basically idolized all the other companies I was reading about, and felt disappointment that my own company and project was so behind.\n\nWhat I eventually learned\nMany conference talks cover proof of concepts rather than real-world scenarios. Just because you see a conference talk about a specific technology, doesn’t mean that company is using that tech in their day to day work, or that all of their code is in perfect shape. Often people who give conference talks are presenting toy apps rather than real-world case studies, it’s important to distinguish the two.\n\nDealing with legacy is completely normal. No but seriously, it’s easy to imagine that some other company doesn’t have legacy to handle. But after spending time at conferences talking to people who work at tippy top tech companies, it becomes clear that we are all in the same boat. What company DOESN’T have a huge PHP or Ruby monolith they’re trying to tame (or had to tame at some point)? Legacy code is normal, and learning to deal with it will often teach you more than building apps from scratch because you’ll be more exposed to concepts you don’t understand yet.\n\n4. Code quality matters most\nBack in the day, getting a code review from me could be brutal.\n\nAt least, I was really nitpicky about coding style. MY coding style, which happened to be a modified version of the Airbnb JavaScript styleguide, but conforming to my personal tastes. Things like indendetation, formatting, naming – god forbid you did it differently than I would have. Passing a code review without at least one comment would have involved both mind-reading and winning the lottery.\n\nImagine 50+ comments on your PR with all the semicolons you missed!\n\nBecause I had eyes like an eagle and this eagle wants those high-quality semicolons 🦅\n\n(Luckily I no longer have eagle eyes after staring at the computer for many years, so you’re all spared – #kiddingnotkidding)\n\nWhat I eventually learned\nGood enough is good enough. There’s a degree of diminishing returns when it comes to how “good” code needs to be. It doesn’t have to be perfectly clean to get the job done and not be a total disaster to maintain. Often code that is a little more repetitive or a tiny bit more verbose is easier for other people to understand. Also, “good code” is not the same as “code that looks like I wrote it”.\n\nArchitecture is more important than nitpicking. While a small line of code could be improved, the stuff that tends to cause bigger problems down the line are usually architectural. I should’ve focused more on the structure of the application than tiny bits of code early on.\n\nCode quality is important, don’t get me wrong. But code quality wasn’t what I thought it was, which was things like linting and formatting or whatever style was promoted in the latest blog post I had read 🙈\n\n5. Everything must be documented!!!!\nWhen I entered my first company, it was honestly the first time I was working a lot with code other people had written. Sure, I had done it a little bit at my first job, but I never really had to come into an existing codebase and to figure out what the heck was going on. That’s because the one time that happened, I rewrote all the code instead of trying to figure out how it worked.\n\nAnyways.\n\nIt didn’t help that it was AngularJS code written by Ruby developers, or that I was a junior developer who didn’t know she was junior 🕵🏻‍♀️\n\nSo how did I handle the fact that 300 lines of unfamiliar code made me feel like I was drowning?\n\nJSDOC. EVERYWHERE.\n\nI started commenting everything just to try to make sense out of it. Annotations for every function I could get my hands on.\n\nI learned all that fancy Angular-specific JSDoc syntax. My code was always twice as long because it had so much documentation and so many comments 👌\n\nWhat I eventually learned\nDocumentation lies sometimes. It’s easy to think that documentation is a cure-all solution. “We need docs!” While I didn’t come to the conclusion that just because documentation is hard work, doesn’t mean it’s not worth doing at all, I learned that you have to document the right things in the right way. Over-documentation of the wrong things tends to lead to staleness, which can be just as confusing to people who are trying to fix an issue.\n\nFocus on automation over documentation where appropriate. Tests or other forms of automation are less likely to go out of sync. So instead I try to focus on writing good tests with clear language, so developers working on code I wrote are able to see how the project functions with working code. Another example is automating the installation of an application with a few comments, rather than a long and detailed installation guide.\n\n6. Technical debt is bad\nIf you thought I was neurotic from the last point, just wait until this one! For a while in my career, I thought that any code I considered “messy” was in fact technical debt. Technical debt is a funny term because if you ask people to give you an example of what it is, there are so many different things that it could be.\n\nSo as someone who viewed any kind of “disorderly” code as technical debt, I immediately tried to eliminate it with the utmost rigor!\n\nI literally once spent a weekend manually fixing 800 linting errors.\n\nThat’s how neurotic I was.\n\n(Disclaimer: This was before auto-fixing was a thing)\n\nWhat I eventually learned\nDisorganized or messy code isn’t the same as technical debt. Just because something doesn’t “feel nice” doesn’t mean it’s technical debt. Technical debt actually slows you down in some way, or makes certain kinds of changes difficult or error prone. If the code is just a little messy, it’s just a little messy. Tidying that up might not be worth my time.\n\nHaving some technical debt is healthy. Sometimes we take a shortcut because we need to borrow time, and for that we give up some of our speed in the future. Having pieces of code that are in fact “technical debt” is okay, so long as you recognize you’ll likely need to pay that debt back. If you think your codebase is free of technical debt, there is a good chance you’re over-emphasizing polish instead of delivery. And boy did I do that!\n\n7. Seniority means being the best at programming\nHaving started at a rather young age to code, I’ve probably been proficient at doing for-loops for like 15+ years. Programming itself is like breathing to me. When a solution is apparent, I can just type away and the code will follow. It’s like writing a blog post or an email. I could code the solution faster than others, and typically took on the more complex projects for myself.\n\nFor a long time I thought that was what it meant to to be a senior developer.\n\nBecause why not? The job title is “senior developer”, not “senior communicator” or “senior project manager”. I didn’t really understand how many other skills I could possibly need to develop in order to be truly senior.\n\nWhat I eventually learned\nSenior engineers must develop many skills besides programming. The sheer number of skills I’ve had to develop in the mean time are astronomical, compared to what I came in with. Ranging from communication and dependency management to sharing context, project management, estimation, and successfully collaborating with non-developer peers. These skills are less quantifiable and take a lot of trial and error to get right.\n\nNot everyone will become “senior” during their career. Seniority is the result of many accrued years of experience. And yet, years of experience is a necessary but not sufficient condition for seniority. It also has to be the right kind of experience in which you internalized the right lessons and successfully apply those learnings for the future. Sometimes bigger lessons can take a year or more to fully manifest – that’s why years of experience still matter, even if you’re a really good coder.\n\nWe’re all still junior in some areas. No matter how much experience you have, there are still places where you don’t know much. Admitting what you don’t know is the first step to filling in that gap and getting help from people who are more experienced.\n\n",
      "imageLink": "https://monicalent.com/images/typing-with-flowers.jpg",
      "author": "Kaunda Berack",
      "readTime": "15 min read",
      "currentTime": "17 May 2021",
      "id": 2
    },
    {
      "category": "career",
      "title": "7 Software Developer Resume Tips to Help You Stand Out",
      "body": "I’ve read thousands of resumes and CVs during my 3+ years as a hiring manager at a high-growth tech startup.\n\nIt’s the same at many companies:\n\nMost applications land in the bin at the stage where your resume or CV is all the company knows about you.\n\nThe reason for this is more or less mathematical: It’s simply impossible to speak to every single applicant. The time of hiring managers, tech recruiters, and everyone involved in any given hiring process is finite.\n\nPopular roles can receive hundreds or thousands of candidates.\n\nTo top it off, companies are pretty much never recruiting for one role at a time. Hiring managers and tech recruiters are usually juggling numerous roles simultaneously. Hiring managers will have their own roles to fill, and may be involved in hiring processes of other managers as well.\n\nThat’s why it’s so important for your application to stand out amid the masses.\n\nLuckily, it’s not that hard to do.\n\nYou can stand out simply by avoid a few painfully common mistakes, and learning a bit about how hiring processes actually work from the perspective of an employer.\n\nRead on for tips on standing out with your resume in the competitive developer job market.\n\nMy experience as a hiring manager\nJust to give you a quick idea about my background, which you’re welcome to skip if you don’t care (hey, some people will take advice from anyone on the internet, you do you).\n\nI’m an American software engineer and former hiring manager, based in Berlin, Germany. There are a couple of unique aspects to this, such as dealing with visas, immigration guidelines, and working in an international environment – all of which can impact the best way to put together a CV. I won’t cover that in this blog post, but feel free to let me know on Twitter (@monicalent) if you’d like CV tips specifically for applying for tech jobs in Germany.\n\nHere’s how I’ve been involved with hiring processes:\n\nI’ve done evaluations of candidates at all steps of a typical hiring process, from recruitment, job fairs, and cold outreach, to CV/resume screening and technical interviews, cultural fit interviews, salary negotiation, and everything in between. I’ve hired just about every level of individual contributor role, ranging from juniors and interns to senior engineers, across the tech stack. I’ve also interviewed engineering managers and VPs though that’s less relevant to this article.\n\nDuring that time, I worked either independently as a hiring manager managing my own hiring process end-to-end, or in tandem with a technical recruiter. I have experience working with both in-house recruitment teams and outsourced recruitment agencies.\n\nWith that out of the way, let’s get to the tips 🚀\n\n\nDisclaimer: This blog post represents my opinions, not those of any employer I’ve had, past or present. I will use this disclaimer to be able to give you my more or less unfiltered opinion on how to practically fix your developer resume or CV so you make it to the next stage.\n\nThanks to Steven, Carolyn, Christian, and Agnes for feedback on this post.\n\n7 Software developer resume tips to help you stand out\nFor the purpose of this post, I’ll be using “resume” and “CV” interchangeably.\n\nHere in Germany, it’s perfectly acceptable to submit a multi-page CV for an application (so long as it’s not full of fluff), whereas in the United States you may be expected to fit everything on one page.\n\nIt doesn’t really matter with regards to these tips, because the most important information should be on the first page anyways 😉\n\n1. For the love of God, use a spell checker\nAnecdotally, I can tell you that having a CV with proper spelling and decent grammar will make you stand out from 90% of candidates who don’t.\n\nNow, I’m not talking about the kinds of minor English mistakes which are common with people who speak English as a second language. That’s just the reality of working in an international environment, and it’s not a deal breaker whatsoever. Frankly I’ve seen native speakers with as many or more errors than non-native speakers.\n\nAvoiding typos and grammatical mistakes might sound trivial, but get this:\n\nAn analysis by Interviewing.io, a hiring platform for engineers, found that \"typos and grammatical errors matter more than anything else\" with regards to the success of a candidate.\n\nBut that analysis wasn’t just about passing the preliminary CV screening.\n\nLack of typos and grammatical errors were the leading indicator that a candidate gets a job offer.\n\nWhy do you think that is?\n\nIt’s probably not because final hiring decisions are made based on a vague memory of the candidate’s immaculate, typo-free CV.\n\nMy personal hypothesis is that having a CV without typos and grammatical mistakes is a byproduct of the candidate paying attention to details and having good communication skills.\n\nOf all the tips on this list, this one is probably the easiest to implement.\n\nSolution: Ask a friend (or two) to proofread\nBesides getting your bff Clippy (or Grammarly) to help you fix typos and spelling mistakes, try reading your CV out loud or asking a friend to proofread it and tell you if it makes sense.\n\nSometimes when you spend hours working on something, it’s easy to become blind to mistakes because your brain fills in the gaps subconsciously.\n\nMaking sure you don’t have typos or grammatical errors in your CV is some of the best time you can spend working on it.\n\n2. Make your resume concise and easy to scan\nRemember how I said that hiring managers and technical recruiters don’t have a lot of time?\n\nThat means it’s your job to make it dead simple to figure out whether you’re a potential fit for the role after about 5-7 seconds of reading your CV.\n\nYou read me right. That’s how long a recruiter typically spends reading a CV according to an eye-tracking study.\n\nIf you look like a potential match, they might spend a little longer looking at your projects, checking out your website, and trying to understand better how you might fit into the existing team.\n\nIf you have long paragraphs with information buried in there, there’s a good chance it’ll get passed over by mistake. Keep your sentences short, simple, direct, and easy to scan.\n\nFrom the first 5 seconds, a recruiter or hiring manager should be able to figure out:\n\nHow much practical, professional experience do you have?\nWhat technologies are you the most comfortable with?\nWhat exactly did you do in your most recent role?\nDo you match the requirements of the job position being advertised?\nSkilled recruiters can and will assess this in a very short amount of time.\n\nTips for making your resume easy to scan\nUse bullet points when possible. The simplest thing I can propose to you is to stick with bullet points when possible, and keeping those sentences really short (no more than 2 lines of text).\n\nMind the maximum width for readability. Bullet points won’t help if the width of your paragraphs or lists are too wide. 70-75 characters is the maximum.\n\nUse active voice and simple grammar. Be direct and concise. Talk about the impact. Make it straightforward to figure out what you actually did (or are doing) at your latest job.\n\nUse bold text to offset important information. See how I’m doing that in this blog post? You can do that on your CV. One way I’ve personally done this is to include the technologies I actively used below the bullet point summary of my responsibilities in a certain position.\n\nFor example:\n\nSkills and technologies: Angular.js, Koa.js, Webpack, Karma, Protractor\n\n3. Don’t list every single technology you’ve ever touched\nSpeaking of being concise, you know what’s not concise?\n\nA gigantic, comma-separated list of every single technology you’ve ever heard of.\n\nSome people might tell you that this is how you get past “algorithms” that look for a specific technology in your resume.\n\nI don’t know how true that is, but I can tell you that once a human looks at it, it comes across like you lack depth in any field, preferring to dabble in a bit of everything.\n\nEven if that’s not true, guess what?\n\nRecruiters and hiring managers don’t have time to figure out whether one of those 50 technologies on your CV is something you’re competent with.\n\nIf they’re desperate, you might get an email back asking for a phone screen. If you’re lucky, they might go searching your GitHub account to try to figure out which technologies you’re actually proficient in.\n\nBut if they have dozens of other candidates with more focused resumes, your application will end up in the bin.\n\nSolution: List technologies you’re comfortable discussing in an interview\nStick to a smaller number of technologies you’d be comfortable working with.\n\nIf you feel it’s important to list technologies you’ve been exposed to (let’s say you’re a junior developer or early in your career), you can denote which ones you are proficient in and which you’ve used passively. For example:\n\nProficient: HTML, CSS, JavaScript, ReactJS, Jest, and Webpack\nFamiliar: Rollup, Redis, and Jenkins\n\nBut please, limit the number of technologies. No one expects you to be an expert in a dozen technologies.\n\nMake it clear what you know well, so they can ask you relevant questions and you can sound smart (and feel comfortable) in a phone screen.\n\nQuestions can come up on just about anything on your CV, even if it’s not immediately related to job you’re applying for.\n\n4. Actually read the job description. Then prove that you did.\nYou’d be surprised how many applications leave a recruiter or hiring manager wondering:\n\n“Did this person read the job ad?”\n\nThere are three main possibilities that come to mind for how this can happen:\n\nYou’re looking to switch your focus from whatever’s currently on your CV\nYou don’t understand the role being advertised and aren’t a fit for the role\nYou actually didn’t read the job ad\nIt doesn’t really matter which one of these it is. If you send in an “irrelevant” resume for a job, and don’t include any context, it’s usually the end of the road.\n\nAgain, you can’t forget that you may be 1 of hundreds or thousands of candidates, and this post is about how to stand out.\n\nIn a sea of applicants, they may not have the time or capacity to follow up and ask you why exactly you thought you were a fit for the role.\n\nSolution: Do some light customization of your application for the role\nIf you’re in the position where you’re looking to shift from one tech stack to another, make that clear in your application. Mention your desire to change, and the steps you’ve taken to learn the new skills required (a link to a GitHub repository would be helpful).\n\nOtherwise, if you’ve done your research, move on to the next tip about how to make it clearer that you’ve read the job description and done the tiniest bit of research about the company you’re applying for.\n\nLast but not least, visit the company’s website and go into the interview with a basic understanding of what they do.\n\n5. Write a customized cover letter\nEven if you think you have a highly relevant CV, you should still consider writing a cover letter. It doesn’t have to be long, but it can only increase your chances of passing the CV screening phase.\n\nWhy?\n\nI hate to be the one to tell you this, but it’s true:\n\nCompanies you’re applying for want to feel a little bit special. Like if they were to offer you a job, there’s a good chance you’d actually accept it.\n\nWhy? Well, because interviewing just one person takes hours of people’s time! And why should they invest hours in scheduling, interviewing, and discussing your application if you’re just as likely to accept any other position?\n\nTrust me.\n\nYou will stand out if you have a coherent cover letter that demonstrates you’ve read the job ad and the website.\n\nIt doesn’t have to be long, either. In fact, it shouldn’t be long, because ain’t nobody got time to read a super long cover letter. Just don’t forget to spell check 😉\n\nTip: Basic elements of a cover letter for a developer role\nCover letters are extremely useful for standing out as a candidate for a number of reasons. Here’s a quick checklist of things you should demonstrate in your cover letter:\n\nShow off your good communication skills\nDemonstrate an understanding of the role\nBriefly explain your qualifications and why you think you’re a good fit\nMention the company name\nDemonstrate that you read the company’s website\nBonus tip: Attach the cover letter as a PDF\nIt’s just easier to read than pretty much any text format that could be typed into a web interface. Again, optimizing for ease of reading.\n\nNote: Some companies may not find the cover letter useful or even read them. This can vary based on the role – for a typical dev job, perhaps not. But for highly competitive junior roles or very senior roles, your motivation is relevant. In the end, a cover letter will never hurt you, and has the possibility to help you stand out.\n\n6. Make it easy to find your work\nNot everyone has time (or desire) to code for hours after work. Frankly, I don’t spend any more time coding than I need to.\n\nBut if you’re early in your career or looking to make a career switch, it is extremely important to have something to share besides a CV with a couple of buzzwords on it.\n\nBut even more important than having it: MAKE IT EASY TO FIND.\n\nI can’t tell you how much effort I’ve put into searching for people’s GitHub accounts, copy-pasting URLs with typos in them, all to try and find a reason to pass the person to the next stage of the process.\n\nBut a lot of CVs don’t make that easy!\n\nIf you’ve put in the effort to have any openly available code, blog posts, a website, or anything public at all – make it easy to access.\n\nSolution: Hyperlinks to blog posts, GitHub repos, your website, etc.\nThis seems basic, but learn how to make your PDF resume or CV actually hyperlink to a website. Go through all the links and actually click on them to make sure they aren’t broken!\n\nRemember: recruiters and managers have a limited amount of time. The easier you can make it for them to see what you can do, the faster they can pass you to the next round 👍🏼\n\n7. Focus on projects and results over formal education\nI’m going to preface this with the disclaimer that it’s totally possible there are recruiters or managers who may have a preference for graduates from a specific school.\n\nI’m not saying you shouldn’t mention your degree or education.\n\nEspecially when applying for jobs in another country where your education may be a key factor in helping you land a work visa.\n\nBut in my experience, junior developers or developers early in their career tend to over-emphasize their education instead of practical, hands-on projects that demonstrate coding ability.\n\nFor example, here’s a grand list of things that don’t tell me if you can code well:\n\nThe grades or GPA you got in school\nWhich school you attended, or what you studied\nWhat your class rank was\nWhich bootcamp you attended\nThat you attended a bootcamp at all\nPretty much anything related to formal education\nIt’s not that those things don’t matter at all. But they are a very weak indicator of whether you’re actually good at writing software. If you’ve sat in on pretty much any Computer Science class, you might notice that having a CS degree does not indicate ability to program.\n\nBeyond that, the market has become flooded with bootcamp graduates at all levels of skill. Just like having a degree, it doesn’t speak for itself whether you learned how to code.\n\nSolution: Focus on what you’ve built and its business impact\nThis can come in a number of forms. Working code is always great, but a well-written blog post or even just a concise and clear explanation on your CV is usually sufficient.\n\nYou can use some popular formulas to express your impact:\n\nBuilt (project, feature) in order to (achieve something) using (technologies).\nIncreased (metric) by (amount) through (technical implementation).\nIntegrated (technologies) by (strategy) in order to (outcome).\nBe specific, and avoid including points where it’s not clear whether you accomplished them yourself or passively participated in a process.\n\nAt the same time, be truthful about your role, responsibilities, and title. Don’t exaggerate. Being untruthful during the process is one of the quickest ways to get disqualified from a position.\n\nLast point on describing your experience: while side projects and initiatives are great, they are mostly there as a supplement – not a replacement – for your accomplishments in your current role.",
      "imageLink": "https://monicalent.com/images/software-developer-resume-tips.jpg",
      "author": "Kaunda Berack",
      "readTime": "14 min read",
      "currentTime": "17 May 2021",
      "id": 3
    },
    {
      "category": "marketing",
      "title": "Responsive Images With Nginx on Ubuntu",
      "body": "I started looking into this topic because, as you’ve probably heard, Google changed its pagespeed insights tool (and search ranking algorithm) to focus on mobile-first. I’ve got an image-heavy blog that does pretty well in Google, but my pagespeed score was somewhere between 75 and 80. One of Google’s biggest complaints to me were that my images were not resized properly.\n\nThe only problem is I have hundreds of images on that blog, and there was no way on earth I was going to actually create mobile-friendly versions of every single image.\n\nNginx to the rescue! Nginx has a neat module called image_filter which will do the work for you and resize images on the fly. This is awesome because it means you also only resize the images people are requesting instead of all the images.",
      "imageLink": "https://monicalent.com/images/blog/banff-canada.jpg",
      "author": "Kaunda Berack",
      "readTime": "1 min read",
      "currentTime": "24 May 2021",
      "id": 4
    },
    {
      "category": "career",
      "title": "I started looking into this topic because, as you’ve probably heard, Google changed its pagespeed insights tool ",
      "body": "(and search ranking algorithm) to focus on mobile-first. I’ve got an image-heavy blog that does pretty well in Google, but my pagespeed score was somewhere between 75 and 80. One of Google’s biggest complaints to me were that my images were not resized properly.\n\nThe only problem is I have hundreds of images on that blog, and there was no way on earth I was going to actually create mobile-friendly versions of every single image.\n\nNginx to the rescue! Nginx has a neat module called image_filter which will do the work for you and resize images on the fly. This is awesome because it means you also only resize the images people are requesting instead of all the images.",
      "imageLink": "https://monicalent.com/images/blog/banff-canada.jpg",
      "author": "Kaunda Berack",
      "readTime": "1 min read",
      "currentTime": "24 May 2021",
      "id": 5
    },
    {
      "category": "development",
      "title": "Firebase Machine Learning is a mobile SDK that brings Google's machine learning expertise to Android and iOS apps ",
      "body": "Firebase Machine Learning is a mobile SDK that brings Google's machine learning expertise to Android and iOS apps in a powerful yet easy-to-use package. Whether you're new or experienced in machine learning, you can implement the functionality you need in just a few lines of code. There's no need to have deep knowledge of neural networks or model optimization to get started. On the other hand, if you are an experienced ML developer, Firebase ML provides convenient APIs that help you use your custom TensorFlow Lite models in your mobile apps.",
      "imageLink": "https://monicalent.com/images/blog/banff-canada.jpg",
      "author": "Kaunda Berack",
      "readTime": "1 min read",
      "currentTime": "26 May 2021",
      "id": 6
    },
    {
      "category": "marketing",
      "title": "Prototype and test end-to-end with the Local Emulator Suite, now with Firebase Authentication\n",
      "body": "rPrototype and test end-to-end with the Local Emulator Suite, now with Firebase Authentication\n",
      "imageLink": "https://cdn.pixabay.com/photo/2021/05/08/20/27/umbrella-6239364_960_720.jpg",
      "author": "Kaunda Berack",
      "readTime": "1 min read",
      "currentTime": "26 May 2021",
      "id": 7
    },
    {
      "category": "career",
      "title": "Introduction to Asynchronous Programming with JavaScript",
      "body": "Your plan was to drink some tea while you read a book. However, when you were about to start, you noticed that there was no sugar for the tea. Instead of completely aborting your plan, you send for some sugar, keep aside the tea and begin reading. When the sugar arrives, you are notified. You pause reading, mix up the tea with the sugar, and go back to your initial plan.\n\nThis is an Asynchronous Pattern. JavaScript inherently supports Async programming patterns with something known as Callbacks. Going back to our analogy, you were \"called back\" when your sugar arrived. You then proceeded to mix them up together.\n\nCallbacks in JavaScript works kind of in the same way. These are functions which contains instructions/statements you want to run after the Asynchronous process is resolved. A callback is the unit of Asynchrony. When you see a callback in a code, know that part will not resolve immediately.",
      "imageLink": "https://cdn.pixabay.com/photo/2021/05/08/20/27/umbrella-6239364_960_720.jpg",
      "author": "Kaunda Berack",
      "readTime": "1 min read",
      "currentTime": "31 May 2021",
      "id": 8
    },
    {
      "category": "development",
      "title": "Using Variable Values From One JavaScript File To Another JavaScript File Using Local Storage (Get And Set)",
      "body": "For instance you have two files => app1.js and app2.js. It came to my mind once, I had this challenge where I had to come with a way to obtain a value of a certain variable from the app1.js file and use the value in app2.js file, I was also limited to not merge the two files and I couldn't practically create a third file to combine the two files.\n\nThen I figured out how to use the Local Storage to solve the issue.\n\nIn the Local Storage web application's can store a large amount of data locally without affecting the website performance, this information is more secure and is NEVER transferred to the servers. Applications data used to be stored on cookies in every server request since cookie storage is limited not as compared to the Local Storage many website's pages opt for it.\n\nBelow is how I implemented the use of Local Storage;\n\nMy app1.js and app2.js files contain 2 variables named varOne and varTwo with values “valueOne” and “valueTwo” respectively.\n\napp1.js var varOne = \"valueOne\"; app2.js var varTwo;\n\nI had to get the value varOne from app1.js and set it in varTwo in app2.js.\n\nFirst, I had to store the value of variable \"varOne\" from app1.js in local stotage (Below is the code written in app1.js)\nlocalStorage.setItem(\"varOneLocalStorage, varOne\"\n\nIn the localStorage, the value is stored in the variable \"varOneLocalStorage\"\n\n2. By the using the get method I had to mention the localStorage variable; (The code belongs in app2.js)\n\nvar varOneLs = localStorage.getItem(\"varOneLocalStorage\");\n\n3. This final copy indicated the value of varOne which is moved to varTwo.\n\nvar varTwo = varOneLs;\n\nWorking with Boolean values in the Local Storage is kinda tricky since the Boolean values need to be changed to a string (Check below)\n\nvar booleanValue = false; localStorage.setItem(\"trueORFalse \", booleanValue); booleanValue = localStorage.getItem(\"trueORFalse\");\n\nNow, the BooleanValue is “false” i.e. converted to string.\n\nTo avoid such problems make sure you convert the string to Boolean.\n\nif (booleanValue == \"false\") booleanValue = false; else booleanValue = true;\n\nSo, apply the above check when dealing with Boolean values in local Storage.\n\nWhen you store a Number value in local Storage, the Number value is changed to string.\n\n(Check below)\n\nvar number = 123; localStorage.setItem(\"numberLS\", number); var value = localStorage.getItem(\"numberLS\");\n\nNow, the numberLS is “123” i.e. converted to string. To convert the string into a number use the code below.\n\nvar result = Number(value);",
      "imageLink": "https://monicalent.com/images/blog/banff-canada.jpg",
      "author": "Kaunda Berack",
      "readTime": "2 min read",
      "currentTime": "2 June 2021",
      "id": 9
    }
  ]
}